"""미래도시
방문 판매원 A는 많은 회사가 모여 있는 공중 미래 도시에 있다.
공중 미래 도시에는 1번부터 N번 까지의 회사가 있는데 특정 회사끼리는 서로 도로를 통해 연결되어 있따.
방문 판매원 A는 현재 1번 회사에 위치해 있으며, X번 회사에 방문해 물건을 판매하고자 한다.
공중 미래 도시에서 특정 회사에 도착하기 위한 방법은 회사끼리 연결되어 있는 도로를 이용하는 방법이 유일하다.
또한 연결된 2개의 회사는 양방향으로 이동할 수 있다.
공중 미래 도시에서의 도로는 마하의 속도로 사람을 이동시켜주기 때문에 특정 회사와 다른 회사가 도로로 연결되어 있다면, 정확히 1만큼의 시간으로 이동할 수 있다.
또한 오늘 방문 판매원 A는 기대하던 소개팅에도 참석하고자 한다.
소개팅의 상대는 K번 회사에 존재한다.
방문 판매원 A는 X번 회사에 가서 물건을 판매하기 전에 먼저 소개팅 상대의 회사에 찾아가서 함께 커피를 마실 예정이다.
따라서 방문 판매원 A는 1번 회사에서 출발하여 K번 회사를 방문한 뒤에 X번 회사로 가는 것이 목표다.
이때 방문 판매원 A는 가능한 한 빠르게 이동하고자 한다.
방문 판매원이 회사 사이를 이동하게 되는 최소 시간을 계산하는 프로그램을 작성하시오.

이때 소개팅의 상대방과 커피를 마시는 시간 등은 고려하지 않는다고 가정한다.
예를 들어 N = 5, X = 4, K = 5이고 회사 간 도로가 7개면서 각 도로가 다음과 같이 연결되어 있을 때를 가정할 수 있다.
(1, 2), (1, 3), (1, 4), (2, 4), (3, 4), (3, 5), (4, 5)
이 때 1-3-5-4 로 설정하면 소개팅에도 참석할 수 있으면서 총 3만큼의 시간으로 이동 가능하다.
"""
# N, M이 100 이하 이므로 플로이드 알고리즘이 더 간단할 수 있다.
import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

# 노드의 개수, 간선의 개수 입력받기
n, m = map(int, input().split())
# 2차원 리스트 만들기
# n + 1 을 하는 이유는 노드는 1부터 시작인데 인덱스는 0부터 시작이니 시작점 맞춰주기 위해서 한다.
graph = [[] * (n + 1) for _ in range(n+1)]
# 최단 거리 테이블을 모두 무한으로 초기화
distance = [INF] * (n + 1)

# 간선들을 그래프로 만들건데
for _ in range(m):
    a, b = map(int, input().split())
    #a를 기준으로 b와 연결된 그래프를 만들거고, a와 b 사이 거리
    #양방향 이동가능하기 때문에
    graph[a].append((b, 1))
    graph[b].append((a, 1))


def dijkstra(start):

    q = []
    # 가장 가깝고 방문안한 노드를 구하기 위해서 heapq 내장 함수 ㅣㅇ용
    # 먼저 출발 값을 넣는다.
    heapq.heappush(q, (0, start))
    # 첫번째 노드에서 첫번째 가는 거리 = 0
    distance[start] = 0

    while q:
        # 가장 최단 거리가 짧은 노드에 대한 정보 꺼내기
        dist, now = heapq.heappop(q)
        # 현재 노드가 이미 처리된 적이 있는 노드라면 무시
        if distance[now] < dist:
            continue
        # 현재 노드와 연결된 다른 인접한 노드들을 확인
        for i in graph[now]:
            cost = dist + i[1]
            # 현재 노드를 거쳐서, 다른 노드로 이동하는 거리가 더 짧은 경우
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))
    return distance

# 도착할 회사 X, 경유할 회사 K
X, K = map(int, input().split())

# 1에서 K 까지의 최단거리, K=5
one_to_k = dijkstra(1)
distanceK = one_to_k[K]
# [1000000000, 0, 1, 1, 1, 2]

# K에서 X 까지의 최단거리, X=4
k_to_x = dijkstra(K)
distanceX = k_to_x[X]
# [1000000000, 2, 2, 1, 1, 0]

# 1~K까지의 최단거리 + K~X까지의 최단거리
dist = distanceK + distanceX
if dist >= INF:
    print(-1)
else:
    print(dist)